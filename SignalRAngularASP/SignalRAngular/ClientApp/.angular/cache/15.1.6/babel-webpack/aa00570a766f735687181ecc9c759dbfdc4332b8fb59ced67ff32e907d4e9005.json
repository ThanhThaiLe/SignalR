{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./chat.service\";\nimport * as i2 from \"@angular/common\";\nfunction AppComponent_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelement(1, \"div\", 15);\n    i0.ɵɵelementStart(2, \"div\", 16)(3, \"div\", 17)(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"span\", 18);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"date\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const msg_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", msg_r1.message, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(8, 2, msg_r1.date, \"medium\"), \" \");\n  }\n}\nfunction AppComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20)(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 18);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const msg_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", msg_r1.message, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(6, 2, msg_r1.date, \"medium\"), \"\");\n  }\n}\nfunction AppComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AppComponent_div_7_div_1_Template, 9, 5, \"div\", 12);\n    i0.ɵɵtemplate(2, AppComponent_div_7_div_2_Template, 7, 5, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", msg_r1.type == \"received\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", msg_r1.type == \"sent\");\n  }\n}\nexport class AppComponent {\n  constructor(chatService, _ngZone) {\n    this.chatService = chatService;\n    this._ngZone = _ngZone;\n    this.title = 'ClientApp';\n    this.txtMessage = '';\n    this.uniqueID = new Date().getTime().toString();\n    this.messages = new Array();\n    this.subscribeToEvents();\n  }\n  sendMessage() {\n    if (this.txtMessage) {\n      this.message = null;\n      this.message.clientuniqueid = this.uniqueID;\n      this.message.type = 'sent';\n      this.message.message = this.txtMessage;\n      this.message.date = new Date();\n      this.messages.push(this.message);\n      this.chatService.sendMessage(this.message);\n      this.txtMessage = '';\n    }\n  }\n  subscribeToEvents() {\n    this.chatService.messageReceived.subscribe(message => {\n      this._ngZone.run(() => {\n        if (message.clientuniqueid !== this.uniqueID) {\n          message.type = 'received';\n          this.messages.push(message);\n        }\n      });\n    });\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 13,\n  vars: 2,\n  consts: [[1, \"container\"], [1, \"text-center\", \"chat_header\"], [1, \"messaging\"], [1, \"inbox_msg\"], [1, \"mesgs\"], [1, \"msg_history\"], [4, \"ngFor\", \"ngForOf\"], [1, \"type_msg\"], [1, \"input_msg_write\"], [\"type\", \"text\", \"placeholder\", \"Type a message\", 1, \"write_msg\", 3, \"value\", \"keydown.enter\"], [\"type\", \"button\", 1, \"msg_send_btn\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"fa-paper-plane-o\"], [\"class\", \"incoming_msg\", 4, \"ngIf\"], [\"class\", \"outgoing_msg\", 4, \"ngIf\"], [1, \"incoming_msg\"], [1, \"incoming_msg_img\"], [1, \"received_msg\"], [1, \"received_withd_msg\"], [1, \"time_date\"], [1, \"outgoing_msg\"], [1, \"sent_msg\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n      i0.ɵɵtext(2, \"Chat Application\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"div\", 5);\n      i0.ɵɵtemplate(7, AppComponent_div_7_Template, 3, 2, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"div\", 8)(10, \"input\", 9);\n      i0.ɵɵlistener(\"keydown.enter\", function AppComponent_Template_input_keydown_enter_10_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_11_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵelement(12, \"i\", 11);\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"value\", ctx.txtMessage);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i2.DatePipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;IAaYA,+BAAyD;IACvDA,0BAAoC;IACpCA,+BAA0B;IAGpBA,YACF;IAAAA,iBAAI;IACJA,gCAAwB;IACtBA,YACF;;IAAAA,iBAAO;;;;IAJLA,eACF;IADEA,+CACF;IAEEA,eACF;IADEA,4EACF;;;;;IAINA,+BAAqD;IAG/CA,YACF;IAAAA,iBAAI;IACJA,gCAAwB;IAACA,YAAgC;;IAAAA,iBAAO;;;;IAF9DA,eACF;IADEA,+CACF;IACyBA,eAAgC;IAAhCA,2EAAgC;;;;;IAnB/DA,2BAAkC;IAChCA,oEAYM;IACNA,oEAOM;IACRA,iBAAM;;;;IArBuBA,eAA4B;IAA5BA,gDAA4B;IAa5BA,eAAwB;IAAxBA,4CAAwB;;;AClB/D,OAAM,MAAOC,YAAY;EAMvBC,YAAoBC,WAAwB,EAAUC,OAAe;IAAjD,gBAAW,GAAXD,WAAW;IAAuB,YAAO,GAAPC,OAAO;IAL7D,UAAK,GAAG,WAAW;IACnB,eAAU,GAAW,EAAE;IACvB,aAAQ,GAAW,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,CAACC,QAAQ,EAAE;IAClD,aAAQ,GAAG,IAAIC,KAAK,EAAW;IAG7B,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EACAC,WAAW;IACT,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB,IAAI,CAACC,OAAO,GAAG,IAAI;MACnB,IAAI,CAACA,OAAO,CAACC,cAAc,GAAG,IAAI,CAACC,QAAQ;MAC3C,IAAI,CAACF,OAAO,CAACG,IAAI,GAAG,MAAM;MAC1B,IAAI,CAACH,OAAO,CAACA,OAAO,GAAG,IAAI,CAACD,UAAU;MACtC,IAAI,CAACC,OAAO,CAACI,IAAI,GAAG,IAAIX,IAAI,EAAE;MAC9B,IAAI,CAACY,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACN,OAAO,CAAC;MAChC,IAAI,CAACT,WAAW,CAACO,WAAW,CAAC,IAAI,CAACE,OAAO,CAAC;MAC1C,IAAI,CAACD,UAAU,GAAG,EAAE;;EAExB;EACQF,iBAAiB;IACvB,IAAI,CAACN,WAAW,CAACgB,eAAe,CAACC,SAAS,CAAER,OAAgB,IAAI;MAC9D,IAAI,CAACR,OAAO,CAACiB,GAAG,CAAC,MAAK;QACpB,IAAIT,OAAO,CAACC,cAAc,KAAK,IAAI,CAACC,QAAQ,EAAE;UAC5CF,OAAO,CAACG,IAAI,GAAG,UAAU;UACzB,IAAI,CAACE,QAAQ,CAACC,IAAI,CAACN,OAAO,CAAC;;MAE/B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AA9BWX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDFzB1B,8BAAuB;MACeA,gCAAgB;MAAAA,iBAAK;MACzDA,8BAAuB;MAIfA,6DAsBM;MACRA,iBAAM;MACNA,8BAAsB;MAMhBA;QAAA,OAAiB2B,iBAAa;MAAA,EAAC;MAJjC3B,iBAME;MACFA,mCAAmE;MAAxBA;QAAA,OAAS2B,iBAAa;MAAA,EAAC;MAChE3B,yBAAsD;MACxDA,iBAAS;;;MAnCUA,eAAW;MAAXA,sCAAW;MA6B5BA,eAAoB;MAApBA,sCAAoB","names":["i0","AppComponent","constructor","chatService","_ngZone","Date","getTime","toString","Array","subscribeToEvents","sendMessage","txtMessage","message","clientuniqueid","uniqueID","type","date","messages","push","messageReceived","subscribe","run","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Github\\SignalR\\SignalRAngularASP\\SignalRAngular\\ClientApp\\src\\app\\app.component.html","D:\\Github\\SignalR\\SignalRAngularASP\\SignalRAngular\\ClientApp\\src\\app\\app.component.ts"],"sourcesContent":["<!-- <body>\r\n  <app-nav-menu></app-nav-menu>\r\n  <main class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </main>\r\n</body> -->\r\n<div class=\"container\">\r\n  <h3 class=\"text-center chat_header\">Chat Application</h3>\r\n  <div class=\"messaging\">\r\n    <div class=\"inbox_msg\">\r\n      <div class=\"mesgs\">\r\n        <div class=\"msg_history\">\r\n          <div *ngFor=\"let msg of messages\">\r\n            <div class=\"incoming_msg\" *ngIf=\"msg.type == 'received'\">\r\n              <div class=\"incoming_msg_img\"></div>\r\n              <div class=\"received_msg\">\r\n                <div class=\"received_withd_msg\">\r\n                  <p>\r\n                    {{ msg.message }}\r\n                  </p>\r\n                  <span class=\"time_date\">\r\n                    {{ msg.date | date : \"medium\" }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"outgoing_msg\" *ngIf=\"msg.type == 'sent'\">\r\n              <div class=\"sent_msg\">\r\n                <p>\r\n                  {{ msg.message }}\r\n                </p>\r\n                <span class=\"time_date\"> {{ msg.date | date : \"medium\" }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"type_msg\">\r\n          <div class=\"input_msg_write\">\r\n            <input\r\n              type=\"text\"\r\n              class=\"write_msg\"\r\n              [value]=\"txtMessage\"\r\n              (keydown.enter)=\"sendMessage()\"\r\n              placeholder=\"Type a message\"\r\n            />\r\n            <button class=\"msg_send_btn\" type=\"button\" (click)=\"sendMessage()\">\r\n              <i class=\"fa fa-paper-plane-o\" aria-hidden=\"true\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, NgZone } from '@angular/core';\r\nimport { ChatService } from './chat.service';\r\nimport { Message } from './message.types';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n  title = 'ClientApp';\r\n  txtMessage: string = '';\r\n  uniqueID: string = new Date().getTime().toString();\r\n  messages = new Array<Message>();\r\n  message: any;\r\n  constructor(private chatService: ChatService, private _ngZone: NgZone) {\r\n    this.subscribeToEvents();\r\n  }\r\n  sendMessage(): void {\r\n    if (this.txtMessage) {\r\n      this.message = null;\r\n      this.message.clientuniqueid = this.uniqueID;\r\n      this.message.type = 'sent';\r\n      this.message.message = this.txtMessage;\r\n      this.message.date = new Date();\r\n      this.messages.push(this.message);\r\n      this.chatService.sendMessage(this.message);\r\n      this.txtMessage = '';\r\n    }\r\n  }\r\n  private subscribeToEvents(): void {\r\n    this.chatService.messageReceived.subscribe((message: Message) => {\r\n      this._ngZone.run(() => {\r\n        if (message.clientuniqueid !== this.uniqueID) {\r\n          message.type = 'received';\r\n          this.messages.push(message);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}