{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nexport class ChatService {\n  constructor() {\n    this.messageReceived = new EventEmitter();\n    this.connectionEstablished = new EventEmitter();\n    this.connectionIsEstablished = false;\n    this.createConnection();\n    this.registerOnServerEvents();\n    this.startConnection();\n  }\n  sendMessage(message) {\n    this._hubConnection.invoke('NewMessage', message);\n  }\n  createConnection() {\n    this._hubConnection = new HubConnectionBuilder().withUrl(window.location.href + 'MessageHub').build();\n  }\n  startConnection() {\n    this._hubConnection.start().then(() => {\n      this.connectionIsEstablished = true;\n      console.log('Hub connection started');\n      this.connectionEstablished.emit(true);\n    }).catch(() => {\n      console.log('Error while establishing connection, retrying...');\n      setTimeout(() => {\n        this.startConnection();\n      }, 5000);\n    });\n  }\n  registerOnServerEvents() {\n    this._hubConnection.on('MessageReceived', data => {\n      this.messageReceived.emit(data);\n    });\n  }\n}\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)();\n};\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AAExD,SAAwBC,oBAAoB,QAAQ,oBAAoB;;AAGxE,OAAM,MAAOC,WAAW;EAOtBC;IANA,oBAAe,GAAG,IAAIH,YAAY,EAAW;IAC7C,0BAAqB,GAAG,IAAIA,YAAY,EAAW;IAE3C,4BAAuB,GAAG,KAAK;IAIrC,IAAI,CAACI,gBAAgB,EAAE;IACvB,IAAI,CAACC,sBAAsB,EAAE;IAC7B,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAC,WAAW,CAACC,OAAgB;IAC1B,IAAI,CAACC,cAAc,CAACC,MAAM,CAAC,YAAY,EAAEF,OAAO,CAAC;EACnD;EAEQJ,gBAAgB;IACtB,IAAI,CAACK,cAAc,GAAG,IAAIR,oBAAoB,EAAE,CAC7CU,OAAO,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,YAAY,CAAC,CAC5CC,KAAK,EAAE;EACZ;EAEQT,eAAe;IACrB,IAAI,CAACG,cAAc,CAChBO,KAAK,EAAE,CACPC,IAAI,CAAC,MAAK;MACT,IAAI,CAACC,uBAAuB,GAAG,IAAI;MACnCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,IAAI,CAACC,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC;IACvC,CAAC,CAAC,CACDC,KAAK,CAAC,MAAK;MACVJ,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;MAC/DI,UAAU,CAAC,MAAK;QACd,IAAI,CAAClB,eAAe,EAAE;MACxB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACN;EAEQD,sBAAsB;IAC5B,IAAI,CAACI,cAAc,CAACgB,EAAE,CAAC,iBAAiB,EAAGC,IAAS,IAAI;MACtD,IAAI,CAACC,eAAe,CAACL,IAAI,CAACI,IAAI,CAAC;IACjC,CAAC,CAAC;EACJ;;AA3CWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;AAAA","names":["EventEmitter","HubConnectionBuilder","ChatService","constructor","createConnection","registerOnServerEvents","startConnection","sendMessage","message","_hubConnection","invoke","withUrl","window","location","href","build","start","then","connectionIsEstablished","console","log","connectionEstablished","emit","catch","setTimeout","on","data","messageReceived","factory"],"sourceRoot":"","sources":["D:\\Github\\SignalR\\SignalRAngularASP\\SignalRAngular\\ClientApp\\src\\app\\chat.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { Message } from './message.types';\r\nimport { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';\r\n\r\n@Injectable()\r\nexport class ChatService {\r\n  messageReceived = new EventEmitter<Message>();\r\n  connectionEstablished = new EventEmitter<Boolean>();\r\n\r\n  private connectionIsEstablished = false;\r\n  private _hubConnection: HubConnection | any;\r\n\r\n  constructor() {\r\n    this.createConnection();\r\n    this.registerOnServerEvents();\r\n    this.startConnection();\r\n  }\r\n\r\n  sendMessage(message: Message) {\r\n    this._hubConnection.invoke('NewMessage', message);\r\n  }\r\n\r\n  private createConnection() {\r\n    this._hubConnection = new HubConnectionBuilder()\r\n      .withUrl(window.location.href + 'MessageHub')\r\n      .build();\r\n  }\r\n\r\n  private startConnection(): void {\r\n    this._hubConnection\r\n      .start()\r\n      .then(() => {\r\n        this.connectionIsEstablished = true;\r\n        console.log('Hub connection started');\r\n        this.connectionEstablished.emit(true);\r\n      })\r\n      .catch(() => {\r\n        console.log('Error while establishing connection, retrying...');\r\n        setTimeout(() => {\r\n          this.startConnection();\r\n        }, 5000);\r\n      });\r\n  }\r\n\r\n  private registerOnServerEvents(): void {\r\n    this._hubConnection.on('MessageReceived', (data: any) => {\r\n      this.messageReceived.emit(data);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}